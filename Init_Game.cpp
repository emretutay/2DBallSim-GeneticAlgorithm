#include "Init_Game.h"



const int SCREEN_WIDTH = 800; // Screen size
const int SCREEN_HEIGHT = 600;

/*
    Initializes the game, creates the map and walls in it.
    Runs the game until it ends.

    @param balls_  The balls that are generated by RGA

    Time Complexity : O(n^3) Cubic Time
    Space Complexity : O(n) Linear Space

*/


Init_Game::Init_Game(vector<Ball> balls_)
{   
    
    balls = balls_;

    // Initialize SDL
    SDL_Init(SDL_INIT_EVERYTHING);
    

    setSlowloops(0); // Setting the number of slow loops 0

    // Create a window
    SDL_Window* window = SDL_CreateWindow("Simulation", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    if (window == nullptr)
    {
        std::cerr << "Failed to create window: " << SDL_GetError() << std::endl;
        //return 1;
    }

    // Create a rendering context
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if (renderer == nullptr)
    {
        std::cerr << "Failed to create renderer: " << SDL_GetError() << std::endl;
        //return 1;
    }

    // Creating an event
    SDL_Event event;


    // Creating a map and adding walls in it
    Map map(SCREEN_WIDTH,SCREEN_HEIGHT);
    float mapWidth = map.getWidth();
    float mapHeight = map.getHeight();
    
    map.addWall(Wall(1.0f, 1.0f, mapWidth, 1.0f, 2.0f)); // top wall
    map.addWall(Wall(mapWidth, 1.0f, mapWidth, mapHeight, 2.0f)); // right wall
    map.addWall(Wall(1.0f, mapHeight, mapWidth, mapHeight,2.0f)); // bottom wall
    map.addWall(Wall(1.0f, 1.0f, 1.0f, mapHeight, 2.0f)); // left wall
    /*
    map.addWall(Wall(1.0f, 450.0f, 700.0f, 450.0f, 2.0f)); // 3.floor
    map.addWall(Wall(150.0f, 300.0f, mapWidth, 300.0f,2.0f)); //2.floor
    map.addWall(Wall(75.0f, 150.0f, 725.0f, 150.0f,2.0f)); //1.floor
    */

    map.addWall(Wall(1.0f, 200.0f, 360.0f, 200.0f, 2.0f)); //1.floor left
    map.addWall(Wall(440.0f, 200.0f, mapWidth, 200.0f, 2.0f)); //1.floor right
    map.addWall(Wall(360.0f, 200.0f, 360.0f, 170.0f, 2.0f)); //left ball catcher
    map.addWall(Wall(440.0f, 200.0f, 440.0f, 170.0f, 2.0f)); //right ball catcher

    map.addWall(Wall(370.0f, 300.0f, 400.0f, 340.0f, 2.0f)); //lower ball catcher
    map.addWall(Wall(400.0f, 340.0f, 430.0f, 300.0f, 2.0f)); 

    map.addWall(Wall(700.0f, 300.0f, mapWidth, 400.0f, 2.0f)); // right bouncer
    map.addWall(Wall(mapWidth, 400.0f, 700.0f, 500.0f, 2.0f)); 

    map.addWall(Wall(100.0f, 300.0f, 1.0f, 400.0f, 2.0f)); // left bouncer
    map.addWall(Wall(1.0f, 400.0f, 100.0f, 500.0f, 2.0f)); 

    map.addWall(Wall(100.0f, mapHeight, 350.0f, 500.0f, 2.0f)); // goal obstacle
    map.addWall(Wall(450.0f, 500.0f, 700.0f, mapHeight, 2.0f)); 

    map.addWall(Wall(350.0f, 500.0f, 370.0f, 450.0f, 2.0f)); // goal ball catcher
    map.addWall(Wall(450.0f, 500.0f, 430.0f, 450.0f, 2.0f)); 



    

   
    // Setting the beginning time of the game
    Uint32 beginTime = SDL_GetTicks();


    // Creating the renderer
    Render render(renderer);
    // Creating the physics simulator
    Physics sim(balls, 0.0f, beginTime);

    
    
    

    end = false;  // Ends the whole application if true
    bool quit = false;  // Quits the game if true
    while (!quit)
    {   
        // Beginning time of the loop
		Uint32 startTicks = SDL_GetTicks();
		

        // Update balls then render map
        balls = sim.updateBall(map);
        render.renderScreen(map,balls,startTicks);
       
       // Check if all balls are stopped
        quit = checkBalls();


        // Quit the program if X button is clicked
        while(SDL_PollEvent(&event)){

            if( event.type == SDL_QUIT )
            {
                //Quit the program
                quit = true;
                end = true;
                
            } 

        }
        
                
             
        
    }    
    // Delete remainders
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    window = NULL;
	renderer = NULL;
    SDL_Quit();    

    
    
}

Init_Game::Init_Game() = default;

vector<Ball> Init_Game::returnBalls(){
    return balls;
}

bool Init_Game::returnEnd()
{
    return end;
}



/*  
    Checks the velocity of the balls if they stopped. 
    If all of them are stopped for 10 Physics updates,
    it tells to game to stop running.

    Time Complexity : O(n) Linear Time
    Space Complexity : O(1) Constant Space

*/
bool Init_Game::checkBalls(){
    
    
    int slow_ball = 0; // Number of stopped balls in the loop
    float velocity;
    // Looping through balls to check if they are stopped
    for(auto& ball : balls){
        velocity = sqrt(pow(ball.getVx(),2) + pow(ball.getVy(),2));
        if (velocity <= 0.1f)
        {
            slow_ball++;
        } 
    }
    
    // If all of the balls is stopped, increment slow loops
    if(slow_ball >= balls.size()){ 
        int newSlowloops = slow_loops + 1;
        setSlowloops(newSlowloops); 
    }

    

    // If number slow loops reach 10, tell the game to stop
    if(slow_loops >= 1000)
    {
        return true;
    }
    return false;
}    


void Init_Game::setSlowloops(int s_loop){
    slow_loops = s_loop;
}

